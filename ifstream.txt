std::basic_string< _CharT, _std::basic_string<c_CharT, _Traits, _Alloc >(3cxx)



NAME
       std::basic_string< _CharT, _Traits, _Alloc > -

SYNOPSIS
   Public Types
       typedef _Alloc allocator_type
       typedef
           __gnu_cxx::__normal_iterator
           < const_pointer, basic_string > const_iterator"
       typedef
           _CharT_alloc_type::const_pointer const_pointer"
       typedef
           _CharT_alloc_type::const_reference const_reference"
       typedef std::reverse_iterator
           < const_iterator > const_reverse_iterator"
       typedef
           _CharT_alloc_type::difference_type difference_type"
       typedef
           __gnu_cxx::__normal_iterator
           < pointer, basic_string > iterator"
       typedef _CharT_alloc_type::pointer pointer
       typedef
           _CharT_alloc_type::reference reference"
       typedef std::reverse_iterator
           < iterator > reverse_iterator"
       typedef
           _CharT_alloc_type::size_type size_type"
       typedef _Traits traits_type
       typedef _Traits::char_type value_type

   Public Member Functions
       basic_string ()
       basic_string (const _Alloc &__a)
       basic_string (const basic_string &__str)
       basic_string (const basic_string &__str, size_type __pos, size_type
           __n=npos)
       basic_string (const basic_string &__str, size_type __pos, size_type
           __n, const _Alloc &__a)
       basic_string (const _CharT *__s, size_type __n, const _Alloc
           &__a=_Alloc())
       basic_string (const _CharT *__s, const _Alloc &__a=_Alloc())
       basic_string (size_type __n, _CharT __c, const _Alloc &__a=_Alloc())
       basic_string (basic_string &&__str) noexcept
       basic_string (initializer_list< _CharT > __l, const _Alloc
           &__a=_Alloc())
       template<class _InputIterator > basic_string (_InputIterator __beg,
           _InputIterator __end, const _Alloc &__a=_Alloc())
       ~basic_string () noexcept
       template<typename _InputIterator > basic_string< _CharT, _Traits,
           _Alloc > & _M_replace_dispatch (iterator __i1, iterator __i2,
           _InputIterator __k1, _InputIterator __k2, __false_type)"
       template<typename _InIterator > _CharT * _S_construct (_InIterator
           __beg, _InIterator __end, const _Alloc &__a, input_iterator_tag)
       template<typename _InIterator > _CharT * _S_construct (_InIterator
           __beg, _InIterator __end, const _Alloc &__a, forward_iterator_tag)
       basic_string & append (const basic_string &__str)
       basic_string & append (const basic_string &__str, size_type __pos,
           size_type __n)
       basic_string & append (const _CharT *__s, size_type __n)
       basic_string & append (const _CharT *__s)
       basic_string & append (size_type __n, _CharT __c)
       basic_string & append (initializer_list< _CharT > __l)
       template<class _InputIterator > basic_string & append (_InputIterator
           __first, _InputIterator __last)
       basic_string & assign (const basic_string &__str)
       basic_string & assign (basic_string &&__str)
       basic_string & assign (const basic_string &__str, size_type __pos,
           size_type __n)
       basic_string & assign (const _CharT *__s, size_type __n)
       basic_string & assign (const _CharT *__s)
       basic_string & assign (size_type __n, _CharT __c)
       template<class _InputIterator > basic_string & assign (_InputIterator
           __first, _InputIterator __last)
       basic_string & assign (initializer_list< _CharT > __l)
       const_reference at (size_type __n) const
       reference at (size_type __n)
       reference back ()
       const_reference back () const
       iterator begin () noexcept
       const_iterator begin () const noexcept
       const _CharT * c_str () const noexcept
       size_type capacity () const noexcept
       const_iterator cbegin () const noexcept
       const_iterator cend () const noexcept
       void clear () noexcept
       int compare (const basic_string &__str) const
       int compare (size_type __pos, size_type __n, const basic_string &__str)
           const
       int compare (size_type __pos1, size_type __n1, const basic_string
           &__str, size_type __pos2, size_type __n2) const
       int compare (const _CharT *__s) const
       int compare (size_type __pos, size_type __n1, const _CharT *__s) const
       int compare (size_type __pos, size_type __n1, const _CharT *__s,
           size_type __n2) const
       size_type copy (_CharT *__s, size_type __n, size_type __pos=0) const
       const_reverse_iterator crbegin () const noexcept
       const_reverse_iterator crend () const noexcept
       const _CharT * data () const noexcept
       bool empty () const noexcept
       iterator end () noexcept
       const_iterator end () const noexcept
       basic_string & erase (size_type __pos=0, size_type __n=npos)
       iterator erase (iterator __position)
       iterator erase (iterator __first, iterator __last)
       size_type find (const _CharT *__s, size_type __pos, size_type __n)
           const
       size_type find (const basic_string &__str, size_type __pos=0) const
           noexcept
       size_type find (const _CharT *__s, size_type __pos=0) const
       size_type find (_CharT __c, size_type __pos=0) const noexcept
       size_type find_first_not_of (const basic_string &__str, size_type
           __pos=0) const noexcept
       size_type find_first_not_of (const _CharT *__s, size_type __pos,
           size_type __n) const
       size_type find_first_not_of (const _CharT *__s, size_type __pos=0)
           const
       size_type find_first_not_of (_CharT __c, size_type __pos=0) const
           noexcept
       size_type find_first_of (const basic_string &__str, size_type __pos=0)
           const noexcept
       size_type find_first_of (const _CharT *__s, size_type __pos, size_type
           __n) const
       size_type find_first_of (const _CharT *__s, size_type __pos=0) const
       size_type find_first_of (_CharT __c, size_type __pos=0) const noexcept
       size_type find_last_not_of (const basic_string &__str, size_type
           __pos=npos) const noexcept
       size_type find_last_not_of (const _CharT *__s, size_type __pos,
           size_type __n) const
       size_type find_last_not_of (const _CharT *__s, size_type __pos=npos)
           const
       size_type find_last_not_of (_CharT __c, size_type __pos=npos) const
           noexcept
       size_type find_last_of (const basic_string &__str, size_type
           __pos=npos) const noexcept
       size_type find_last_of (const _CharT *__s, size_type __pos, size_type
           __n) const
       size_type find_last_of (const _CharT *__s, size_type __pos=npos) const
       size_type find_last_of (_CharT __c, size_type __pos=npos) const
           noexcept
       reference front ()
       const_reference front () const
       allocator_type get_allocator () const noexcept
       void insert (iterator __p, size_type __n, _CharT __c)
       template<class _InputIterator > void insert (iterator __p,
           _InputIterator __beg, _InputIterator __end)
       void insert (iterator __p, initializer_list< _CharT > __l)
       basic_string & insert (size_type __pos1, const basic_string &__str)
       basic_string & insert (size_type __pos1, const basic_string &__str,
           size_type __pos2, size_type __n)
       basic_string & insert (size_type __pos, const _CharT *__s, size_type
           __n)
       basic_string & insert (size_type __pos, const _CharT *__s)
       basic_string & insert (size_type __pos, size_type __n, _CharT __c)
       iterator insert (iterator __p, _CharT __c)
       size_type length () const noexcept
       size_type max_size () const noexcept
       basic_string & operator+= (const basic_string &__str)
       basic_string & operator+= (const _CharT *__s)
       basic_string & operator+= (_CharT __c)
       basic_string & operator+= (initializer_list< _CharT > __l)
       basic_string & operator= (const basic_string &__str)
       basic_string & operator= (const _CharT *__s)
       basic_string & operator= (_CharT __c)
       basic_string & operator= (basic_string &&__str)
       basic_string & operator= (initializer_list< _CharT > __l)
       const_reference operator[] (size_type __pos) const
       reference operator[] (size_type __pos)
       void pop_back ()
       void push_back (_CharT __c)
       reverse_iterator rbegin () noexcept
       const_reverse_iterator rbegin () const noexcept
       reverse_iterator rend () noexcept
       const_reverse_iterator rend () const noexcept
       basic_string & replace (size_type __pos, size_type __n, const
           basic_string &__str)
       basic_string & replace (size_type __pos1, size_type __n1, const
           basic_string &__str, size_type __pos2, size_type __n2)
       basic_string & replace (size_type __pos, size_type __n1, const _CharT
           *__s, size_type __n2)
       basic_string & replace (size_type __pos, size_type __n1, const _CharT
           *__s)
       basic_string & replace (size_type __pos, size_type __n1, size_type
           __n2, _CharT __c)
       basic_string & replace (iterator __i1, iterator __i2, const
           basic_string &__str)
       basic_string & replace (iterator __i1, iterator __i2, const _CharT
           *__s, size_type __n)
       basic_string & replace (iterator __i1, iterator __i2, const _CharT
           *__s)
       basic_string & replace (iterator __i1, iterator __i2, size_type __n,
           _CharT __c)
       template<class _InputIterator > basic_string & replace (iterator __i1,
           iterator __i2, _InputIterator __k1, _InputIterator __k2)
       basic_string & replace (iterator __i1, iterator __i2, _CharT *__k1,
           _CharT *__k2)
       basic_string & replace (iterator __i1, iterator __i2, const _CharT
           *__k1, const _CharT *__k2)
       basic_string & replace (iterator __i1, iterator __i2, iterator __k1,
           iterator __k2)
       basic_string & replace (iterator __i1, iterator __i2, const_iterator
           __k1, const_iterator __k2)
       basic_string & replace (iterator __i1, iterator __i2, initializer_list<
           _CharT > __l)
       void reserve (size_type __res_arg=0)
       void resize (size_type __n, _CharT __c)
       void resize (size_type __n)
       size_type rfind (const basic_string &__str, size_type __pos=npos) const
           noexcept
       size_type rfind (const _CharT *__s, size_type __pos, size_type __n)
           const
       size_type rfind (const _CharT *__s, size_type __pos=npos) const
       size_type rfind (_CharT __c, size_type __pos=npos) const noexcept
       void shrink_to_fit ()
       size_type size () const noexcept
       basic_string substr (size_type __pos=0, size_type __n=npos) const
       void swap (basic_string &__s)

   Static Public Attributes
       static const size_type npos

Detailed Description
   template<typename _CharT, typename _Traits, typename _Alloc>class
       std::basic_string< _CharT, _Traits, _Alloc >
       Managing sequences of characters and character-like objects.



       Template Parameters:
           _CharT Type of character
           _Traits Traits for character type, defaults to char_traits<_CharT>.
           _Alloc Allocator type, defaults to allocator<_CharT>.

       Meets the requirements of a container, a reversible container, and a
       sequence. Of the optional sequence requirements, only push_back, at,
       and array access are supported.

       Todo
           Needs documentation! See
           http://gcc.gnu.org/onlinedocs/libstdc++/manual/documentation_style.html

       Documentation? What's that? Nathan Myers ncm@cantrip.org.

       A string looks like this:

                                            [_Rep]
                                            _M_length
       [basic_string<char_type>]            _M_capacity
       _M_dataplus                          _M_refcount
       _M_p ---------------->               unnamed array of char_type

       Where the _M_p points to the first character in the string, and you
       cast it to a pointer-to-_Rep and subtract 1 to get a pointer to the
       header.

       This approach has the enormous advantage that a string object requires
       only one allocation. All the ugliness is confined within a single pair
       of inline functions, which each compile to a single add instruction:
       _Rep::_M_data(), and string::_M_rep(); and the allocation function
       which gets a block of raw bytes and with room enough and constructs a
       _Rep object at the front.

       The reason you want _M_data pointing to the character array and not the
       _Rep is so that the debugger can see the string contents. (Probably we
       should add a non-inline member to get the _Rep for the debugger to use,
       so users can check the actual string length.)

       Note that the _Rep object is a POD so that you can have a static empty
       string _Rep object already constructed before static constructors have
       run. The reference-count encoding is chosen so that a 0 indicates one
       reference, so you never try to destroy the empty-string _Rep object.

       All but the last paragraph is considered pretty conventional for a C++
       string implementation.

       Definition at line 112 of file basic_string.h.

Constructor & Destructor Documentation
   template<typename _CharT, typename _Traits, typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string () [inline]
       Default constructor creates an empty string.

       Definition at line 437 of file basic_string.h.

       Referenced by std::basic_string< char >::substr().

   template<typename _CharT , typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       _Alloc &__a) [explicit]
       Construct an empty string using allocator a.

       Definition at line 178 of file basic_string.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > &__str)
       Construct string with copy of value of str.

       Parameters:
           __str Source string.

       Definition at line 170 of file basic_string.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos,
       size_type__n = npos)
       Construct string as copy of a substring.

       Parameters:
           __str Source string.
           __pos Index of first character to copy from.
           __n Number of characters to copy (default remainder).

       Definition at line 184 of file basic_string.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos,
       size_type__n, const _Alloc &__a)
       Construct string as copy of a substring.

       Parameters:
           __str Source string.
           __pos Index of first character to copy from.
           __n Number of characters to copy.
           __a Allocator to use.

       Definition at line 194 of file basic_string.tcc.

   template<typename _CharT, typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       _CharT *__s, size_type__n, const _Alloc &__a = _Alloc())
       Construct string initialized by a character array.

       Parameters:
           __s Source character array.
           __n Number of characters to copy.
           __a Allocator to use (default is default allocator).

       NB: __s must have at least __n characters, '\0' has no special meaning.

       Definition at line 206 of file basic_string.tcc.

   template<typename _CharT, typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string (const
       _CharT *__s, const _Alloc &__a = _Alloc())
       Construct string as copy of a C string.

       Parameters:
           __s Source C string.
           __a Allocator to use (default is default allocator).

       Definition at line 213 of file basic_string.tcc.

   template<typename _CharT, typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string
       (size_type__n, _CharT__c, const _Alloc &__a = _Alloc())
       Construct string as multiple characters.

       Parameters:
           __n Number of characters.
           __c Character to use.
           __a Allocator to use (default is default allocator).

       Definition at line 220 of file basic_string.tcc.

   template<typename _CharT, typename _Traits, typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string
       (basic_string< _CharT, _Traits, _Alloc > &&__str) [inline],  [noexcept]
       Move construct string.

       Parameters:
           __str Source string.

       The newly-created string contains the exact contents of __str. __str is
       a valid, but unspecified string.

       Definition at line 507 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::basic_string
       (initializer_list< _CharT >__l, const _Alloc &__a = _Alloc())
       Construct string from an initializer list.

       Parameters:
           __l std::initializer_list of characters.
           __a Allocator to use (default is default allocator).

       Definition at line 235 of file basic_string.tcc.

   template<typename _CharT , typename _Traits , typename _Alloc>
       template<typename _InputIterator > std::basic_string< _CharT, _Traits,
       _Alloc >::basic_string (_InputIterator__beg, _InputIterator__end, const
       _Alloc &__a = _Alloc())
       Construct string as copy of a range.

       Parameters:
           __beg Start of range.
           __end End of range.
           __a Allocator to use (default is default allocator).

       Definition at line 228 of file basic_string.tcc.

   template<typename _CharT, typename _Traits, typename _Alloc>
       std::basic_string< _CharT, _Traits, _Alloc >::~basic_string ()
       [inline],  [noexcept]
       Destroy the string instance.

       Definition at line 538 of file basic_string.h.

Member Function Documentation
   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (const basic_string< _CharT, _Traits, _Alloc
       > &__str)
       Append a string to this string.

       Parameters:
           __str The string to append.

       Returns:
           Reference to this string.

       Definition at line 325 of file basic_string.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc >::size(), and
       std::size().

       Referenced by std::basic_string< char >::append(), std::collate< _CharT
       >::do_transform(), std::operator+(), std::basic_string< char
       >::operator+=(), and std::operator>>().

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (const basic_string< _CharT, _Traits, _Alloc
       > &__str, size_type__pos, size_type__n)
       Append a substring.

       Parameters:
           __str The string to append.
           __pos Index of the first character of str to append.
           __n The number of characters to append.

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range if __pos is not a valid index.

       This function appends __n characters from __str starting at __pos to
       this string. If __n is is larger than the number of available
       characters in __str, the remainder of __str is appended.

       Definition at line 342 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (const _CharT *__s, size_type__n)
       Append a C substring.

       Parameters:
           __s The C string to append.
           __n The number of characters to append.

       Returns:
           Reference to this string.

       Definition at line 298 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::append (const _CharT
       *__s) [inline]
       Append a C string.

       Parameters:
           __s The C string to append.

       Returns:
           Reference to this string.

       Definition at line 1006 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::append (size_type__n, _CharT__c)
       Append multiple characters.

       Parameters:
           __n The number of characters to append.
           __c The character to use.

       Returns:
           Reference to this string.

       Appends __n copies of __c to this string.

       Definition at line 281 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::append (initializer_list<
       _CharT >__l) [inline]
       Append an initializer_list of characters.

       Parameters:
           __l The initializer_list of characters to append.

       Returns:
           Reference to this string.

       Definition at line 1030 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> template<class
       _InputIterator > basic_string& std::basic_string< _CharT, _Traits,
       _Alloc >::append (_InputIterator__first, _InputIterator__last) [inline]
       Append a range of characters.

       Parameters:
           __first Iterator referencing the first character to append.
           __last Iterator marking the end of the range.

       Returns:
           Reference to this string.

       Appends characters in the range [__first,__last) to this string.

       Definition at line 1044 of file basic_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::assign (const basic_string< _CharT, _Traits, _Alloc
       > &__str)
       Set value to contents of another string.

       Parameters:
           __str Source string to use.

       Returns:
           Reference to this string.

       Definition at line 243 of file basic_string.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::get_allocator().

       Referenced by std::basic_string< char >::assign(), std::basic_string<
       char >::operator=(), std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::overflow(), and std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::str().

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::assign (basic_string<
       _CharT, _Traits, _Alloc > &&__str) [inline]
       Set value to contents of another string.

       Parameters:
           __str Source string to use.

       Returns:
           Reference to this string.

       This function sets this string to the exact contents of __str. __str is
       a valid, but unspecified string.

       Definition at line 1079 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::assign (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos,
       size_type__n) [inline]
       Set value to a substring of a string.

       Parameters:
           __str The string to use.
           __pos Index of the first character of str.
           __n Number of characters to use.

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range if pos is not a valid index.

       This function sets this string to the substring of __str consisting of
       __n characters at __pos. If __n is is larger than the number of
       available characters in __str, the remainder of __str is used.

       Definition at line 1100 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::assign (const _CharT *__s, size_type__n)
       Set value to a C substring.

       Parameters:
           __s The C string to use.
           __n Number of characters to use.

       Returns:
           Reference to this string.

       This function sets the value of this string to the first __n characters
       of __s. If __n is is larger than the number of available characters in
       __s, the remainder of __s is used.

       Definition at line 259 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::assign (const _CharT
       *__s) [inline]
       Set value to contents of a C string.

       Parameters:
           __s The C string to use.

       Returns:
           Reference to this string.

       This function sets the value of this string to the value of __s. The
       data is copied, so there is no dependence on __s once the function
       returns.

       Definition at line 1128 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::assign (size_type__n,
       _CharT__c) [inline]
       Set value to multiple characters.

       Parameters:
           __n Length of the resulting string.
           __c The character to use.

       Returns:
           Reference to this string.

       This function sets the value of this string to __n copies of character
       __c.

       Definition at line 1144 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> template<class
       _InputIterator > basic_string& std::basic_string< _CharT, _Traits,
       _Alloc >::assign (_InputIterator__first, _InputIterator__last) [inline]
       Set value to a range of characters.

       Parameters:
           __first Iterator referencing the first character to append.
           __last Iterator marking the end of the range.

       Returns:
           Reference to this string.

       Sets value of string to characters in the range [__first,__last).

       Definition at line 1157 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::assign (initializer_list<
       _CharT >__l) [inline]
       Set value to an initializer_list of characters.

       Parameters:
           __l The initializer_list of characters to assign.

       Returns:
           Reference to this string.

       Definition at line 1167 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reference std::basic_string< _CharT, _Traits, _Alloc >::at
       (size_type__n) const [inline]
       Provides access to the data contained in the string.

       Parameters:
           __n The index of the character to access.

       Returns:
           Read-only (const) reference to the character.

       Exceptions:
           std::out_of_range If n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the string. The function throws
       out_of_range if the check fails.

       Definition at line 864 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> reference
       std::basic_string< _CharT, _Traits, _Alloc >::at (size_type__n)
       [inline]
       Provides access to the data contained in the string.

       Parameters:
           __n The index of the character to access.

       Returns:
           Read/write reference to the character.

       Exceptions:
           std::out_of_range If n is an invalid index.

       This function provides for safer data access. The parameter is first
       checked that it is in the range of the string. The function throws
       out_of_range if the check fails. Success results in unsharing the
       string.

       Definition at line 883 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> reference
       std::basic_string< _CharT, _Traits, _Alloc >::back () [inline]
       Returns a read/write reference to the data at the last element of the
       string.

       Definition at line 913 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reference std::basic_string< _CharT, _Traits, _Alloc >::back ()
       const [inline]
       Returns a read-only (constant) reference to the data at the last
       element of the string.

       Definition at line 921 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> iterator
       std::basic_string< _CharT, _Traits, _Alloc >::begin () [inline],
       [noexcept]
       Returns a read/write iterator that points to the first character in the
       string. Unshares the string.

       Definition at line 605 of file basic_string.h.

       Referenced by std::basic_string< char >::crend(), std::regex_match(),
       std::regex_replace(), std::regex_search(), and std::basic_string< char
       >::rend().

   template<typename _CharT, typename _Traits, typename _Alloc> const_iterator
       std::basic_string< _CharT, _Traits, _Alloc >::begin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points to the first
       character in the string.

       Definition at line 616 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> const _CharT*
       std::basic_string< _CharT, _Traits, _Alloc >::c_str () const [inline],
       [noexcept]
       Return const pointer to null-terminated contents. This is a handle to
       internal data. Do not modify or dire things may happen.

       Definition at line 1800 of file basic_string.h.

       Referenced by std::collate< _CharT >::do_compare(), std::money_get<
       _CharT, _InIter >::do_get(), std::num_get< _CharT, _InIter >::do_get(),
       std::collate< _CharT >::do_transform(), std::basic_filebuf< char_type,
       traits_type >::open(), and std::operator==().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::capacity () const
       [inline],  [noexcept]
       Returns the total number of characters that the string can hold before
       needing to allocate more memory.

       Definition at line 776 of file basic_string.h.

       Referenced by std::basic_string< char >::push_back(), and
       std::basic_string< char >::shrink_to_fit().

   template<typename _CharT, typename _Traits, typename _Alloc> const_iterator
       std::basic_string< _CharT, _Traits, _Alloc >::cbegin () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points to the first
       character in the string.

       Definition at line 680 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> const_iterator
       std::basic_string< _CharT, _Traits, _Alloc >::cend () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       character in the string.

       Definition at line 688 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> void
       std::basic_string< _CharT, _Traits, _Alloc >::clear () [inline],
       [noexcept]
       Erases the string, making it empty.

       Definition at line 803 of file basic_string.h.

       Referenced by std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::setbuf().

   template<typename _CharT, typename _Traits, typename _Alloc> int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (const
       basic_string< _CharT, _Traits, _Alloc > &__str) const [inline]
       Compare to a string.

       Parameters:
           __str String to compare against.

       Returns:
           Integer < 0, 0, or > 0.

       Returns an integer < 0 if this string is ordered before __str, 0 if
       their values are equivalent, or > 0 if this string is ordered after
       __str. Determines the effective length rlen of the strings to compare
       as the smallest of size() and str.size(). The function then compares
       the two strings by calling traits::compare(data(), str.data(),rlen). If
       the result of the comparison is nonzero returns it, otherwise the
       shorter one is ordered first.

       Definition at line 2225 of file basic_string.h.

       Referenced by std::sub_match< _Bi_iter >::compare(), std::operator<(),
       std::operator<=(), std::operator==(), std::operator>(), and
       std::operator>=().

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type__pos,
       size_type__n, const basic_string< _CharT, _Traits, _Alloc > &__str)
       const
       Compare substring to a string.

       Parameters:
           __pos Index of first character of substring.
           __n Number of characters in substring.
           __str String to compare against.

       Returns:
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n characters starting at
       __pos. Returns an integer < 0 if the substring is ordered before __str,
       0 if their values are equivalent, or > 0 if the substring is ordered
       after __str. Determines the effective length rlen of the strings to
       compare as the smallest of the length of the substring and
       __str.size(). The function then compares the two strings by calling
       traits::compare(substring.data(),str.data(),rlen). If the result of the
       comparison is nonzero returns it, otherwise the shorter one is ordered
       first.

       Definition at line 916 of file basic_string.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(),
       std::min(), and std::basic_string< _CharT, _Traits, _Alloc >::size().

   template<typename _CharT , typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type__pos1,
       size_type__n1, const basic_string< _CharT, _Traits, _Alloc > &__str,
       size_type__pos2, size_type__n2) const
       Compare substring to a substring.

       Parameters:
           __pos1 Index of first character of substring.
           __n1 Number of characters in substring.
           __str String to compare against.
           __pos2 Index of first character of substring of str.
           __n2 Number of characters in substring of str.

       Returns:
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at
       __pos1. Form the substring of __str from the __n2 characters starting
       at __pos2. Returns an integer < 0 if this substring is ordered before
       the substring of __str, 0 if their values are equivalent, or > 0 if
       this substring is ordered after the substring of __str. Determines the
       effective length rlen of the strings to compare as the smallest of the
       lengths of the substrings. The function then compares the two strings
       by calling
       traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen). If
       the result of the comparison is nonzero returns it, otherwise the
       shorter one is ordered first.

       Definition at line 931 of file basic_string.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc >::data(), and
       std::min().

   template<typename _CharT, typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (const _CharT
       *__s) const
       Compare to a C string.

       Parameters:
           __s C string to compare against.

       Returns:
           Integer < 0, 0, or > 0.

       Returns an integer < 0 if this string is ordered before __s, 0 if their
       values are equivalent, or > 0 if this string is ordered after __s.
       Determines the effective length rlen of the strings to compare as the
       smallest of size() and the length of a string constructed from __s. The
       function then compares the two strings by calling
       traits::compare(data(),s,rlen). If the result of the comparison is
       nonzero returns it, otherwise the shorter one is ordered first.

       Definition at line 949 of file basic_string.tcc.

       References std::min(), and std::size().

   template<typename _CharT, typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type__pos,
       size_type__n1, const _CharT *__s) const
       Compare substring to a C string.

       Parameters:
           __pos Index of first character of substring.
           __n1 Number of characters in substring.
           __s C string to compare against.

       Returns:
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at
       pos. Returns an integer < 0 if the substring is ordered before __s, 0
       if their values are equivalent, or > 0 if the substring is ordered
       after __s. Determines the effective length rlen of the strings to
       compare as the smallest of the length of the substring and the length
       of a string constructed from __s. The function then compares the two
       string by calling traits::compare(substring.data(),__s,rlen). If the
       result of the comparison is nonzero returns it, otherwise the shorter
       one is ordered first.

       Definition at line 964 of file basic_string.tcc.

       References std::min().

   template<typename _CharT, typename _Traits , typename _Alloc > int
       std::basic_string< _CharT, _Traits, _Alloc >::compare (size_type__pos,
       size_type__n1, const _CharT *__s, size_type__n2) const
       Compare substring against a character array.

       Parameters:
           __pos Index of first character of substring.
           __n1 Number of characters in substring.
           __s character array to compare against.
           __n2 Number of characters of s.

       Returns:
           Integer < 0, 0, or > 0.

       Form the substring of this string from the __n1 characters starting at
       __pos. Form a string from the first __n2 characters of __s. Returns an
       integer < 0 if this substring is ordered before the string from __s, 0
       if their values are equivalent, or > 0 if this substring is ordered
       after the string from __s. Determines the effective length rlen of the
       strings to compare as the smallest of the length of the substring and
       __n2. The function then compares the two strings by calling
       traits::compare(substring.data(),s,rlen). If the result of the
       comparison is nonzero returns it, otherwise the shorter one is ordered
       first.

       NB: s must have at least n2 characters, '\0' has no special meaning.

       Definition at line 980 of file basic_string.tcc.

       References std::min().

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::copy (_CharT *__s, size_type__n,
       size_type__pos = 0) const
       Copy substring into C string.

       Parameters:
           __s C string to copy value into.
           __n Number of characters to copy.
           __pos Index of first character to copy.

       Returns:
           Number of characters actually copied

       Exceptions:
           std::out_of_range If __pos > size().

       Copies up to __n characters starting at __pos into the C string __s. If
       __pos is greater than size(), out_of_range is thrown.

       Definition at line 723 of file basic_string.tcc.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::crbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       character in the string. Iteration is done in reverse element order.

       Definition at line 697 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::crend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first character in the string. Iteration is done in reverse
       element order.

       Definition at line 706 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> const _CharT*
       std::basic_string< _CharT, _Traits, _Alloc >::data () const [inline],
       [noexcept]
       Return const pointer to contents. This is a handle to internal data. Do
       not modify or dire things may happen.

       Definition at line 1810 of file basic_string.h.

       Referenced by std::basic_string< char >::compare(), std::basic_string<
       _CharT, _Traits, _Alloc >::compare(), std::collate< _CharT
       >::do_compare(), std::collate< _CharT >::do_transform(),
       std::basic_string< char >::find(), std::basic_string< char
       >::find_first_not_of(), std::basic_string< char >::find_last_of(),
       std::match_results< _FwdIterT, _Alloc >::format(),
       std::basic_stringbuf< _CharT, _Traits, _Alloc >::str(), and
       std::regex_traits< _Ch_type >::transform().

   template<typename _CharT, typename _Traits, typename _Alloc> bool
       std::basic_string< _CharT, _Traits, _Alloc >::empty () const [inline],
       [noexcept]
       Returns true if the string is empty. Equivalent to *this == ''.

       Definition at line 811 of file basic_string.h.

       Referenced by std::tr2::operator>>(), and std::operator>>().

   template<typename _CharT, typename _Traits, typename _Alloc> iterator
       std::basic_string< _CharT, _Traits, _Alloc >::end () [inline],
       [noexcept]
       Returns a read/write iterator that points one past the last character
       in the string. Unshares the string.

       Definition at line 624 of file basic_string.h.

       Referenced by std::basic_string< char >::crbegin(), std::basic_string<
       char >::rbegin(), std::regex_match(), std::regex_replace(), and
       std::regex_search().

   template<typename _CharT, typename _Traits, typename _Alloc> const_iterator
       std::basic_string< _CharT, _Traits, _Alloc >::end () const [inline],
       [noexcept]
       Returns a read-only (constant) iterator that points one past the last
       character in the string.

       Definition at line 635 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::erase (size_type__pos =
       0, size_type__n = npos) [inline]
       Remove characters.

       Parameters:
           __pos Index of first character to remove (default 0).
           __n Number of characters to remove (default remainder).

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range If pos is beyond the end of this string.

       Removes __n characters from this string starting at __pos. The length
       of the string is reduced by __n. If there are < __n characters to
       remove, the remainder of the string is truncated. If __p is beyond end
       of string, out_of_range is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1362 of file basic_string.h.

       Referenced by std::getline(), std::operator>>(), and std::basic_string<
       char >::pop_back().

   template<typename _CharT, typename _Traits, typename _Alloc> iterator
       std::basic_string< _CharT, _Traits, _Alloc >::erase
       (iterator__position) [inline]
       Remove one character.

       Parameters:
           __position Iterator referencing the character to remove.

       Returns:
           iterator referencing same location after removal.

       Removes the character at __position from this string. The value of the
       string doesn't change if an error is thrown.

       Definition at line 1378 of file basic_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::iterator std::basic_string<
       _CharT, _Traits, _Alloc >::erase (iterator__first, iterator__last)
       Remove a range of characters.

       Parameters:
           __first Iterator referencing the first character to remove.
           __last Iterator referencing the end of the range.

       Returns:
           Iterator referencing location of first after removal.

       Removes the characters in the range [first,last) from this string. The
       value of the string doesn't change if an error is thrown.

       Definition at line 391 of file basic_string.tcc.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find (const _CharT *__s, size_type__pos,
       size_type__n) const
       Find position of a C substring.

       Parameters:
           __s C string to locate.
           __pos Index of character to search from.
           __n Number of characters from s to search for.

       Returns:
           Index of start of first occurrence.

       Starting from __pos, searches forward for the first __n characters in
       __s within this string. If found, returns the index where it begins. If
       not found, returns npos.

       Definition at line 737 of file basic_string.tcc.

       References std::size().

       Referenced by std::basic_string< char >::find(), and std::basic_string<
       char >::find_first_of().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find (const basic_string<
       _CharT, _Traits, _Alloc > &__str, size_type__pos = 0) const [inline],
       [noexcept]
       Find position of a string.

       Parameters:
           __str String to locate.
           __pos Index of character to search from (default 0).

       Returns:
           Index of start of first occurrence.

       Starting from __pos, searches forward for value of __str within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 1846 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find (const _CharT *__s,
       size_type__pos = 0) const [inline]
       Find position of a C string.

       Parameters:
           __s C string to locate.
           __pos Index of character to search from (default 0).

       Returns:
           Index of start of first occurrence.

       Starting from __pos, searches forward for the value of __s within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 1861 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find (_CharT__c, size_type__pos = 0) const
       [noexcept]
       Find position of a character.

       Parameters:
           __c Character to locate.
           __pos Index of character to search from (default 0).

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for __c within this string. If
       found, returns the index where it was found. If not found, returns
       npos.

       Definition at line 760 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_not_of (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos = 0)
       const [inline],  [noexcept]
       Find position of a character not in string.

       Parameters:
           __str String containing characters to avoid.
           __pos Index of character to search from (default 0).

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 2079 of file basic_string.h.

       Referenced by std::basic_string< char >::find_first_not_of().

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_not_of (const _CharT *__s,
       size_type__pos, size_type__n) const
       Find position of a character not in C substring.

       Parameters:
           __s C string containing characters to avoid.
           __pos Index of character to search from.
           __n Number of characters from __s to consider.

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in
       the first __n characters of __s within this string. If found, returns
       the index where it was found. If not found, returns npos.

       Definition at line 852 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_not_of (const
       _CharT *__s, size_type__pos = 0) const [inline]
       Find position of a character not in C string.

       Parameters:
           __s C string containing characters to avoid.
           __pos Index of character to search from (default 0).

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for a character not contained in
       __s within this string. If found, returns the index where it was found.
       If not found, returns npos.

       Definition at line 2110 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_not_of (_CharT__c, size_type__pos
       = 0) const [noexcept]
       Find position of a different character.

       Parameters:
           __c Character to avoid.
           __pos Index of character to search from (default 0).

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for a character other than __c
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 864 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos = 0)
       const [inline],  [noexcept]
       Find position of a character of string.

       Parameters:
           __str String containing characters to locate.
           __pos Index of character to search from (default 0).

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for one of the characters of
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 1952 of file basic_string.h.

       Referenced by std::basic_string< char >::find_first_of().

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_first_of (const _CharT *__s,
       size_type__pos, size_type__n) const
       Find position of a character of C substring.

       Parameters:
           __s String containing characters to locate.
           __pos Index of character to search from.
           __n Number of characters from s to search for.

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for one of the first __n
       characters of __s within this string. If found, returns the index where
       it was found. If not found, returns npos.

       Definition at line 816 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of (const
       _CharT *__s, size_type__pos = 0) const [inline]
       Find position of a character of C string.

       Parameters:
           __s String containing characters to locate.
           __pos Index of character to search from (default 0).

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for one of the characters of __s
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 1982 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_first_of (_CharT__c,
       size_type__pos = 0) const [inline],  [noexcept]
       Find position of a character.

       Parameters:
           __c Character to locate.
           __pos Index of character to search from (default 0).

       Returns:
           Index of first occurrence.

       Starting from __pos, searches forward for the character __c within this
       string. If found, returns the index where it was found. If not found,
       returns npos.

       Note: equivalent to find(__c, __pos).

       Definition at line 2001 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_not_of (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos = npos)
       const [inline],  [noexcept]
       Find last position of a character not in string.

       Parameters:
           __str String containing characters to avoid.
           __pos Index of character to search back from (default end).

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 2142 of file basic_string.h.

       Referenced by std::basic_string< char >::find_last_not_of().

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_not_of (const _CharT *__s,
       size_type__pos, size_type__n) const
       Find last position of a character not in C substring.

       Parameters:
           __s C string containing characters to avoid.
           __pos Index of character to search back from.
           __n Number of characters from s to consider.

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in
       the first __n characters of __s within this string. If found, returns
       the index where it was found. If not found, returns npos.

       Definition at line 875 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_not_of (const
       _CharT *__s, size_type__pos = npos) const [inline]
       Find last position of a character not in C string.

       Parameters:
           __s C string containing characters to avoid.
           __pos Index of character to search back from (default end).

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for a character not contained in
       __s within this string. If found, returns the index where it was found.
       If not found, returns npos.

       Definition at line 2173 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_not_of (_CharT__c, size_type__pos
       = npos) const [noexcept]
       Find last position of a different character.

       Parameters:
           __c Character to avoid.
           __pos Index of character to search back from (default end).

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for a character other than __c
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 896 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos = npos)
       const [inline],  [noexcept]
       Find last position of a character of string.

       Parameters:
           __str String containing characters to locate.
           __pos Index of character to search back from (default end).

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for one of the characters of
       __str within this string. If found, returns the index where it was
       found. If not found, returns npos.

       Definition at line 2016 of file basic_string.h.

       Referenced by std::basic_string< char >::find_last_of().

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::find_last_of (const _CharT *__s,
       size_type__pos, size_type__n) const
       Find last position of a character of C substring.

       Parameters:
           __s C string containing characters to locate.
           __pos Index of character to search back from.
           __n Number of characters from s to search for.

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for one of the first __n
       characters of __s within this string. If found, returns the index where
       it was found. If not found, returns npos.

       Definition at line 831 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of (const
       _CharT *__s, size_type__pos = npos) const [inline]
       Find last position of a character of C string.

       Parameters:
           __s C string containing characters to locate.
           __pos Index of character to search back from (default end).

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for one of the characters of __s
       within this string. If found, returns the index where it was found. If
       not found, returns npos.

       Definition at line 2046 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::find_last_of (_CharT__c,
       size_type__pos = npos) const [inline],  [noexcept]
       Find last position of a character.

       Parameters:
           __c Character to locate.
           __pos Index of character to search back from (default end).

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for __c within this string. If
       found, returns the index where it was found. If not found, returns
       npos.

       Note: equivalent to rfind(__c, __pos).

       Definition at line 2065 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> reference
       std::basic_string< _CharT, _Traits, _Alloc >::front () [inline]
       Returns a read/write reference to the data at the first element of the
       string.

       Definition at line 897 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reference std::basic_string< _CharT, _Traits, _Alloc >::front ()
       const [inline]
       Returns a read-only (constant) reference to the data at the first
       element of the string.

       Definition at line 905 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> allocator_type
       std::basic_string< _CharT, _Traits, _Alloc >::get_allocator () const
       [inline],  [noexcept]
       Return copy of allocator used to construct this string.

       Definition at line 1817 of file basic_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::assign(),
       std::basic_string< char >::basic_string(), std::basic_string< _CharT,
       _Traits, _Alloc >::swap(), and std::basic_string< char
       >::~basic_string().

   template<typename _CharT, typename _Traits, typename _Alloc> void
       std::basic_string< _CharT, _Traits, _Alloc >::insert (iterator__p,
       size_type__n, _CharT__c) [inline]
       Insert multiple characters.

       Parameters:
           __p Iterator referencing location in string to insert at.
           __n Number of characters to insert
           __c The character to insert.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Inserts __n copies of character __c starting at the position referenced
       by iterator __p. If adding characters causes the length to exceed
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1185 of file basic_string.h.

       Referenced by std::basic_string< char >::insert().

   template<typename _CharT, typename _Traits, typename _Alloc> template<class
       _InputIterator > void std::basic_string< _CharT, _Traits, _Alloc
       >::insert (iterator__p, _InputIterator__beg, _InputIterator__end)
       [inline]
       Insert a range of characters.

       Parameters:
           __p Iterator referencing location in string to insert at.
           __beg Start of range.
           __end End of range.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Inserts characters in range [__beg,__end). If adding characters causes
       the length to exceed max_size(), length_error is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1202 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> void
       std::basic_string< _CharT, _Traits, _Alloc >::insert (iterator__p,
       initializer_list< _CharT >__l) [inline]
       Insert an initializer_list of characters.

       Parameters:
           __p Iterator referencing location in string to insert at.
           __l The initializer_list of characters to insert.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Definition at line 1213 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::insert (size_type__pos1,
       const basic_string< _CharT, _Traits, _Alloc > &__str) [inline]
       Insert value of a string.

       Parameters:
           __pos1 Iterator referencing location in string to insert at.
           __str The string to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Inserts value of __str starting at __pos1. If adding characters causes
       the length to exceed max_size(), length_error is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1233 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::insert (size_type__pos1,
       const basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos2,
       size_type__n) [inline]
       Insert a substring.

       Parameters:
           __pos1 Iterator referencing location in string to insert at.
           __str The string to insert.
           __pos2 Start of characters in str to insert.
           __n Number of characters to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().
           std::out_of_range If pos1 > size() or __pos2 > str.size().

       Starting at pos1, insert __n character of __str beginning with __pos2.
       If adding characters causes the length to exceed max_size(),
       length_error is thrown. If __pos1 is beyond the end of this string or
       __pos2 is beyond the end of __str, out_of_range is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1255 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::insert (size_type__pos, const _CharT *__s,
       size_type__n)
       Insert a C substring.

       Parameters:
           __pos Iterator referencing location in string to insert at.
           __s The C string to insert.
           __n The number of characters to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos is beyond the end of this string.

       Inserts the first __n characters of __s starting at __pos. If adding
       characters causes the length to exceed max_size(), length_error is
       thrown. If __pos is beyond end(), out_of_range is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 360 of file basic_string.tcc.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::insert (size_type__pos,
       const _CharT *__s) [inline]
       Insert a C string.

       Parameters:
           __pos Iterator referencing location in string to insert at.
           __s The C string to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().
           std::out_of_range If pos is beyond the end of this string.

       Inserts the first n characters of __s starting at __pos. If adding
       characters causes the length to exceed max_size(), length_error is
       thrown. If __pos is beyond end(), out_of_range is thrown. The value of
       the string doesn't change if an error is thrown.

       Definition at line 1296 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::insert (size_type__pos,
       size_type__n, _CharT__c) [inline]
       Insert multiple characters.

       Parameters:
           __pos Index in string to insert at.
           __n Number of characters to insert
           __c The character to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().
           std::out_of_range If __pos is beyond the end of this string.

       Inserts __n copies of character __c starting at index __pos. If adding
       characters causes the length to exceed max_size(), length_error is
       thrown. If __pos > length(), out_of_range is thrown. The value of the
       string doesn't change if an error is thrown.

       Definition at line 1319 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> iterator
       std::basic_string< _CharT, _Traits, _Alloc >::insert (iterator__p,
       _CharT__c) [inline]
       Insert one character.

       Parameters:
           __p Iterator referencing position in string to insert at.
           __c The character to insert.

       Returns:
           Iterator referencing newly inserted char.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Inserts character __c at position referenced by __p. If adding
       character causes the length to exceed max_size(), length_error is
       thrown. If __p is beyond end of string, out_of_range is thrown. The
       value of the string doesn't change if an error is thrown.

       Definition at line 1337 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::length () const [inline],
       [noexcept]
       Returns the number of characters in the string, not including any null-
       termination.

       Definition at line 721 of file basic_string.h.

       Referenced by std::collate< _CharT >::do_compare(), and std::collate<
       _CharT >::do_transform().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::max_size () const
       [inline],  [noexcept]
       Returns the size() of the largest possible string.

       Definition at line 726 of file basic_string.h.

       Referenced by std::getline(), and std::operator>>().

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator+= (const
       basic_string< _CharT, _Traits, _Alloc > &__str) [inline]
       Append a string to this string.

       Parameters:
           __str The string to append.

       Returns:
           Reference to this string.

       Definition at line 932 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator+= (const _CharT
       *__s) [inline]
       Append a C string.

       Parameters:
           __s The C string to append.

       Returns:
           Reference to this string.

       Definition at line 941 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator+= (_CharT__c)
       [inline]
       Append a character.

       Parameters:
           __c The character to append.

       Returns:
           Reference to this string.

       Definition at line 950 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator+=
       (initializer_list< _CharT >__l) [inline]
       Append an initializer_list of characters.

       Parameters:
           __l The initializer_list of characters to be appended.

       Returns:
           Reference to this string.

       Definition at line 963 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator= (const
       basic_string< _CharT, _Traits, _Alloc > &__str) [inline]
       Assign the value of str to this string.

       Parameters:
           __str Source string.

       Definition at line 546 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator= (const _CharT
       *__s) [inline]
       Copy contents of s into this string.

       Parameters:
           __s Source null-terminated string.

       Definition at line 554 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator= (_CharT__c)
       [inline]
       Set value to string of length 1.

       Parameters:
           __c Source character.

       Assigning to a character makes this string length 1 and (*this)[0] ==
       c.

       Definition at line 565 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator= (basic_string<
       _CharT, _Traits, _Alloc > &&__str) [inline]
       Move assign the value of str to this string.

       Parameters:
           __str Source string.

       The contents of str are moved into this string (without copying). str
       is a valid, but unspecified string.

       Definition at line 580 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::operator=
       (initializer_list< _CharT >__l) [inline]
       Set value to string constructed from initializer list.

       Parameters:
           __l std::initializer_list.

       Definition at line 592 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reference std::basic_string< _CharT, _Traits, _Alloc
       >::operator[] (size_type__pos) const [inline]
       Subscript access to the data contained in the string.

       Parameters:
           __pos The index of the character to access.

       Returns:
           Read-only (constant) reference to the character.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().)

       Definition at line 826 of file basic_string.h.

       Referenced by std::basic_string< char >::back(), and std::basic_string<
       char >::front().

   template<typename _CharT, typename _Traits, typename _Alloc> reference
       std::basic_string< _CharT, _Traits, _Alloc >::operator[]
       (size_type__pos) [inline]
       Subscript access to the data contained in the string.

       Parameters:
           __pos The index of the character to access.

       Returns:
           Read/write reference to the character.

       This operator allows for easy, array-style, data access. Note that data
       access with this operator is unchecked and out_of_range lookups are not
       defined. (For checked lookups see at().) Unshares the string.

       Definition at line 843 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> void
       std::basic_string< _CharT, _Traits, _Alloc >::pop_back () [inline]
       Remove the last character. The string must be non-empty.

       Definition at line 1407 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> void
       std::basic_string< _CharT, _Traits, _Alloc >::push_back (_CharT__c)
       [inline]
       Append a single character.

       Parameters:
           __c Character to append.

       Definition at line 1052 of file basic_string.h.

       Referenced by std::collate< _CharT >::do_transform(),
       std::basic_string< char >::operator+=(), std::tr2::operator>>(),
       std::operator>>(), and std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::overflow().

   template<typename _CharT, typename _Traits, typename _Alloc>
       reverse_iterator std::basic_string< _CharT, _Traits, _Alloc >::rbegin
       () [inline],  [noexcept]
       Returns a read/write reverse iterator that points to the last character
       in the string. Iteration is done in reverse element order. Unshares the
       string.

       Definition at line 644 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::rbegin () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to the last
       character in the string. Iteration is done in reverse element order.

       Definition at line 653 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       reverse_iterator std::basic_string< _CharT, _Traits, _Alloc >::rend ()
       [inline],  [noexcept]
       Returns a read/write reverse iterator that points to one before the
       first character in the string. Iteration is done in reverse element
       order. Unshares the string.

       Definition at line 662 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc>
       const_reverse_iterator std::basic_string< _CharT, _Traits, _Alloc
       >::rend () const [inline],  [noexcept]
       Returns a read-only (constant) reverse iterator that points to one
       before the first character in the string. Iteration is done in reverse
       element order.

       Definition at line 671 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (size_type__pos,
       size_type__n, const basic_string< _CharT, _Traits, _Alloc > &__str)
       [inline]
       Replace characters with value from another string.

       Parameters:
           __pos Index of first character to replace.
           __n Number of characters to be replaced.
           __str String to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range If pos is beyond the end of this string.
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos,__pos+__n) from this string.
       In place, the value of __str is inserted. If __pos is beyond end of
       string, out_of_range is thrown. If the length of the result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1429 of file basic_string.h.

       Referenced by std::basic_string< char >::append(), std::basic_string<
       char >::assign(), std::basic_string< char >::insert(), and
       std::basic_string< char >::replace().

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (size_type__pos1,
       size_type__n1, const basic_string< _CharT, _Traits, _Alloc > &__str,
       size_type__pos2, size_type__n2) [inline]
       Replace characters with value from another string.

       Parameters:
           __pos1 Index of first character to replace.
           __n1 Number of characters to be replaced.
           __str String to insert.
           __pos2 Index of first character of str to use.
           __n2 Number of characters from str to use.

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range If __pos1 > size() or __pos2 > __str.size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos1,__pos1 + n) from this
       string. In place, the value of __str is inserted. If __pos is beyond
       end of string, out_of_range is thrown. If the length of the result
       exceeds max_size(), length_error is thrown. The value of the string
       doesn't change if an error is thrown.

       Definition at line 1451 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc > & std::basic_string< _CharT,
       _Traits, _Alloc >::replace (size_type__pos, size_type__n1, const _CharT
       *__s, size_type__n2)
       Replace characters with value of a C substring.

       Parameters:
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __s C string to insert.
           __n2 Number of characters from s to use.

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range If pos1 > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos,__pos + __n1) from this
       string. In place, the first __n2 characters of __s are inserted, or all
       of __s if __n2 is too large. If __pos is beyond end of string,
       out_of_range is thrown. If the length of result exceeds max_size(),
       length_error is thrown. The value of the string doesn't change if an
       error is thrown.

       Definition at line 414 of file basic_string.tcc.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (size_type__pos,
       size_type__n1, const _CharT *__s) [inline]
       Replace characters with value of a C string.

       Parameters:
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __s C string to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range If pos > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__pos,__pos + __n1) from this
       string. In place, the characters of __s are inserted. If __pos is
       beyond end of string, out_of_range is thrown. If the length of result
       exceeds max_size(), length_error is thrown. The value of the string
       doesn't change if an error is thrown.

       Definition at line 1496 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (size_type__pos,
       size_type__n1, size_type__n2, _CharT__c) [inline]
       Replace characters with multiple characters.

       Parameters:
           __pos Index of first character to replace.
           __n1 Number of characters to be replaced.
           __n2 Number of characters to insert.
           __c Character to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::out_of_range If __pos > size().
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [pos,pos + n1) from this string. In
       place, __n2 copies of __c are inserted. If __pos is beyond end of
       string, out_of_range is thrown. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1520 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (iterator__i1,
       iterator__i2, const basic_string< _CharT, _Traits, _Alloc > &__str)
       [inline]
       Replace range of characters with string.

       Parameters:
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __str String value to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, the value of
       __str is inserted. If the length of result exceeds max_size(),
       length_error is thrown. The value of the string doesn't change if an
       error is thrown.

       Definition at line 1538 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (iterator__i1,
       iterator__i2, const _CharT *__s, size_type__n) [inline]
       Replace range of characters with C substring.

       Parameters:
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __s C string value to insert.
           __n Number of characters from s to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, the first
       __n characters of __s are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1557 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (iterator__i1,
       iterator__i2, const _CharT *__s) [inline]
       Replace range of characters with C string.

       Parameters:
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __s C string value to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, the
       characters of __s are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1578 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (iterator__i1,
       iterator__i2, size_type__n, _CharT__c) [inline]
       Replace range of characters with multiple characters.

       Parameters:
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __n Number of characters to insert.
           __c Character to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, __n copies
       of __c are inserted. If the length of result exceeds max_size(),
       length_error is thrown. The value of the string doesn't change if an
       error is thrown.

       Definition at line 1599 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> template<class
       _InputIterator > basic_string& std::basic_string< _CharT, _Traits,
       _Alloc >::replace (iterator__i1, iterator__i2, _InputIterator__k1,
       _InputIterator__k2) [inline]
       Replace range of characters with range.

       Parameters:
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __k1 Iterator referencing start of range to insert.
           __k2 Iterator referencing end of range to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, characters
       in the range [__k1,__k2) are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1623 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string&
       std::basic_string< _CharT, _Traits, _Alloc >::replace (iterator__i1,
       iterator__i2, initializer_list< _CharT >__l) [inline]
       Replace range of characters with initializer_list.

       Parameters:
           __i1 Iterator referencing start of range to replace.
           __i2 Iterator referencing end of range to replace.
           __l The initializer_list of characters to insert.

       Returns:
           Reference to this string.

       Exceptions:
           std::length_error If new length exceeds max_size().

       Removes the characters in the range [__i1,__i2). In place, characters
       in the range [__k1,__k2) are inserted. If the length of result exceeds
       max_size(), length_error is thrown. The value of the string doesn't
       change if an error is thrown.

       Definition at line 1692 of file basic_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::reserve
       (size_type__res_arg = 0)
       Attempt to preallocate enough memory for specified number of
       characters.

       Parameters:
           __res_arg Number of characters required.

       Exceptions:
           std::length_error If __res_arg exceeds max_size().

       This function attempts to reserve enough memory for the string to hold
       the specified number of characters. If the number requested is more
       than max_size(), length_error is thrown.

       The advantage of this function is that if optimal code is a necessity
       and the user can determine the string length that will be required, the
       user can reserve the memory in advance, and thus prevent a possible
       reallocation of memory and copying of string data.

       Definition at line 502 of file basic_string.tcc.

       References std::size().

       Referenced by std::num_get< _CharT, _InIter >::do_get(),
       std::tr2::operator>>(), std::operator>>(), std::basic_stringbuf<
       _CharT, _Traits, _Alloc >::overflow(), std::basic_string< char
       >::push_back(), and std::basic_string< char >::shrink_to_fit().

   template<typename _CharT, typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::resize (size_type__n,
       _CharT__c)
       Resizes the string to the specified number of characters.

       Parameters:
           __n Number of characters the string should contain.
           __c Character to fill any new elements.

       This function will resize the string to the specified number of
       characters. If the number is smaller than the string's current size the
       string is truncated, otherwise the string is extended and new elements
       are set to __c.

       Definition at line 640 of file basic_string.tcc.

       References std::size().

       Referenced by std::money_get< _CharT, _InIter >::do_get(), and
       std::basic_string< char >::resize().

   template<typename _CharT, typename _Traits, typename _Alloc> void
       std::basic_string< _CharT, _Traits, _Alloc >::resize (size_type__n)
       [inline]
       Resizes the string to the specified number of characters.

       Parameters:
           __n Number of characters the string should contain.

       This function will resize the string to the specified length. If the
       new size is smaller than the string's current size the string is
       truncated, otherwise the string is extended and new characters are
       default-constructed. For basic types such as char, this means setting
       them to 0.

       Definition at line 753 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::rfind (const
       basic_string< _CharT, _Traits, _Alloc > &__str, size_type__pos = npos)
       const [inline],  [noexcept]
       Find last position of a string.

       Parameters:
           __str String to locate.
           __pos Index of character to search back from (default end).

       Returns:
           Index of start of last occurrence.

       Starting from __pos, searches backward for value of __str within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 1891 of file basic_string.h.

       Referenced by std::basic_string< char >::find_last_of(), and
       std::basic_string< char >::rfind().

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::rfind (const _CharT *__s, size_type__pos,
       size_type__n) const
       Find last position of a C substring.

       Parameters:
           __s C string to locate.
           __pos Index of character to search back from.
           __n Number of characters from s to search for.

       Returns:
           Index of start of last occurrence.

       Starting from __pos, searches backward for the first __n characters in
       __s within this string. If found, returns the index where it begins. If
       not found, returns npos.

       Definition at line 778 of file basic_string.tcc.

       References std::min(), and std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::rfind (const _CharT *__s,
       size_type__pos = npos) const [inline]
       Find last position of a C string.

       Parameters:
           __s C string to locate.
           __pos Index of character to start search at (default end).

       Returns:
           Index of start of last occurrence.

       Starting from __pos, searches backward for the value of __s within this
       string. If found, returns the index where it begins. If not found,
       returns npos.

       Definition at line 1921 of file basic_string.h.

   template<typename _CharT, typename _Traits , typename _Alloc >
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::rfind (_CharT__c, size_type__pos = npos)
       const [noexcept]
       Find last position of a character.

       Parameters:
           __c Character to locate.
           __pos Index of character to search back from (default end).

       Returns:
           Index of last occurrence.

       Starting from __pos, searches backward for __c within this string. If
       found, returns the index where it was found. If not found, returns
       npos.

       Definition at line 799 of file basic_string.tcc.

       References std::size().

   template<typename _CharT, typename _Traits, typename _Alloc> void
       std::basic_string< _CharT, _Traits, _Alloc >::shrink_to_fit () [inline]
       A non-binding request to reduce capacity() to size().

       Definition at line 759 of file basic_string.h.

   template<typename _CharT, typename _Traits, typename _Alloc> size_type
       std::basic_string< _CharT, _Traits, _Alloc >::size () const [inline],
       [noexcept]
       Returns the number of characters in the string, not including any null-
       termination.

       Definition at line 715 of file basic_string.h.

       Referenced by std::basic_string< _CharT, _Traits, _Alloc >::append(),
       std::basic_string< char >::assign(), std::basic_string< char >::at(),
       std::basic_string< char >::back(), std::basic_string< char >::cend(),
       std::basic_string< char >::clear(), std::basic_string< char
       >::compare(), std::basic_string< _CharT, _Traits, _Alloc >::compare(),
       std::tr2::dynamic_bitset< _WordT, _Alloc >::dynamic_bitset(),
       std::basic_string< char >::empty(), std::basic_string< char >::end(),
       std::basic_string< char >::find(), std::basic_string< char
       >::find_first_not_of(), std::basic_string< char >::find_last_of(),
       std::match_results< _FwdIterT, _Alloc >::format(), std::basic_string<
       char >::insert(), std::operator+(), std::tr2::operator>>(),
       std::basic_string< char >::operator[](), std::basic_string< char
       >::pop_back(), std::basic_string< char >::push_back(),
       std::basic_string< char >::replace(), std::basic_string< char
       >::shrink_to_fit(), std::basic_stringbuf< _CharT, _Traits, _Alloc
       >::str(), and std::regex_traits< _Ch_type >::transform().

   template<typename _CharT, typename _Traits, typename _Alloc> basic_string
       std::basic_string< _CharT, _Traits, _Alloc >::substr (size_type__pos =
       0, size_type__n = npos) const [inline]
       Get a substring.

       Parameters:
           __pos Index of first character (default 0).
           __n Number of characters in substring (default remainder).

       Returns:
           The new string.

       Exceptions:
           std::out_of_range If __pos > size().

       Construct and return a new string using the __n characters starting at
       __pos. If the string is too short, use the remainder of the characters.
       If __pos is beyond the end of the string, out_of_range is thrown.

       Definition at line 2206 of file basic_string.h.

   template<typename _CharT , typename _Traits , typename _Alloc > void
       std::basic_string< _CharT, _Traits, _Alloc >::swap (basic_string<
       _CharT, _Traits, _Alloc > &__s)
       Swap contents with another string.

       Parameters:
           __s String to swap with.

       Exchanges the contents of this string with that of __s in constant
       time.

       Definition at line 519 of file basic_string.tcc.

       References std::basic_string< _CharT, _Traits, _Alloc
       >::get_allocator().

       Referenced by std::basic_string< char >::assign(), std::basic_string<
       char >::operator=(), and std::swap().

Member Data Documentation
   template<typename _CharT, typename _Traits, typename _Alloc> const
       basic_string< _CharT, _Traits, _Alloc >::size_type std::basic_string<
       _CharT, _Traits, _Alloc >::npos [static]
       Value returned by various member functions when they fail.

       Definition at line 285 of file basic_string.h.


Author
       Generated automatically by Doxygen for libstdc++ from the source code.



libstdc++                   std::basic_string<3_CharT, _Traits, _Alloc >(3cxx)
